<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1, maximum-scale=1,user-scalable=no"
    />
    <title>NaviGator</title>
    <link
      rel="stylesheet"
      href="https://js.arcgis.com/3.43/esri/css/esri.css"
    />
    <link rel="stylesheet" type="text/css" href="style.css" />
  </head>
  <body>
    <div id="map-container">
      <div id="map"></div>
      <div id="input-container">
        <div id="menu-toggle">Hide menu</div>
        <h2>NaviGator</h2>
        <section id="mainText">
          <label for="startLocation"> Starting Point:</label>
          <input type="text" id="startLocation" name="startLocation" />
          <br />
          <label for="endLocation">Destination:</label>
          <input type="text" id="endLocation" name="endLocation" />
          <br />
          <input type="checkbox" id="option1" name="option1" value="option1" />
          <label for="option1">Dijkstra's</label><br />
          <input type="checkbox" id="option2" name="option2" value="option2" />
          <label for="option2">Breadth-First Search</label><br />
          <button id="calculate-route-btn" onclick="calculateRoute()"> Calculate Route </button>
        </section>
      </div>
    </div>
    <script src="https://js.arcgis.com/3.43/"></script>
    <script>
      var map, openStreetMapLayer;
      require([
        "esri/map",
        "esri/layers/OpenStreetMapLayer",
        "esri/geometry/Point",
        "esri/symbols/SimpleMarkerSymbol",
        "esri/graphic",
        "dojo/domReady!",
      ], function (
        Map,
        OpenStreetMapLayer,
        Point,
        SimpleMarkerSymbol,
        Graphic
      ) {
        map = new Map("map", {
          center: [-82.3522, 29.6424],
          zoom: 12,
        });
        openStreetMapLayer = new OpenStreetMapLayer();
        map.addLayer(openStreetMapLayer);
        // Create a symbol for the marker
        var markerSymbol = new SimpleMarkerSymbol();
        markerSymbol.setColor("#FF0000"); // Red
        // Create a graphic object to hold the marker
        var graphic = new Graphic();
        // Add an event listener to the map for user clicks
        map.on("click", function (evt) {
          // Set the graphic's geometry to the clicked point
          graphic.setGeometry(new Point(evt.mapPoint));
          // Set the graphic's symbol to the marker symbol
          graphic.setSymbol(markerSymbol);
          // Add the graphic to the map
          map.graphics.add(graphic);
        });
      });

      var isContainerVisible = true;
      document.getElementById("menu-toggle").addEventListener("click", function() {
        var inputContainer = document.getElementById("input-container");
        var menuToggle = document.getElementById("menu-toggle");
        if (isContainerVisible) {
          inputContainer.style.left = "-500px";
          isContainerVisible = false;
          menuToggle.innerText = "Show menu";
        } else {
          inputContainer.style.left = "0px";
          isContainerVisible = true;
          menuToggle.innerText = "Hide menu";
        }
      });


      //This is a test query to get different data from the database
      //GPEREZCOLON.UFDATA contains id, lat, lon for each node, use GPT to build an oracle sql to get this data -> SELECT id, lat, lon FROM GPEREZCOLON.UFDATA;
      //GPEREZCOLON.UFWAYS contains way_id, start_node_id, end_node_id for each way, the query might return NULL for a node id if the way extends beyond the database (i.e. 2nd ave is long)
      //You can use the lat and lon to assign weights to edges, the node ids of the ways are the connected nodes
      //Use the id for nodes to request more data about it using the OPENSTREETMAPS api
      var query1 = 'SELECT COUNT(*) FROM GPEREZCOLON.UFDATA';
      fetch('/query1', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify({query: query1})
      })
      .then(response => {
      if (response.ok) {
          console.log('Query sent to server');
          return response.text();
      } else {
          console.error('Error sending query to server');
      }
      })
      .then (data => {
          console.log(data); //Do something with node data
      })
      .catch(error => console.error('Error sending query to server', error)); 



      //curData_ = document.getElementById("curData");
      var id = "8013981115"; //Get this from the database
      const osmFetch = "https://api.openstreetmap.org/api/0.6/node/";

      var data;
      var parser = new DOMParser();
      var xmlDoc;

      //Fetches node data
        fetch(osmFetch + id, {
          headers: {
            Accept: "application/xml",
        }})
        .then((response) => response.text())
        .then((result) => {
          console.log(result);
          
          xmlDoc = parser.parseFromString(result, "text/xml");
          const curNode = xmlDoc.getElementsByTagName("node")[0];
          const curLat = curNode.getAttribute("lat");
          console.log(curLat);
          const curLon = curNode.getAttribute("lon");
          console.log(curLon);
          const curTags = curNode.getElementsByTagName("tag");
          const curCity = curTags[0].getAttribute("v");
          console.log(curCity);
          const curHouseNum = curTags[1].getAttribute("v");
          console.log(curHouseNum);
          const curPostCode = curTags[2].getAttribute("v");
          console.log(curPostCode);
          const curState = curTags[3].getAttribute("v");
          console.log(curState);
          const curStreet = curTags[4].getAttribute("v");
          console.log(curStreet);
          const curName = curTags[5].getAttribute("v");
          console.log(curName);
          const curPhone = curTags[6].getAttribute("v");
          console.log(curPhone);
          const curShop = curTags[7].getAttribute("v");
          console.log(curShop);
          console.log(xmlDoc.getElementsByTagName("node")[0]);
          //curData_.innerHTML = JSON.stringify(typeof result);
          
        })
        .catch((error) => {
          console.error(error);
        });
    </script>
  </head>

  
</html>
