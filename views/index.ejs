

<!DOCTYPE html>

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1, maximum-scale=1,user-scalable=no"
    />
    <title>NaviGator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet-control-search/3.0.1/css/bundle.css" />
    <link rel="stylesheet" type="text/css" href="style.css" />
    <script src="./algorithms.js" type="module"></script>
  </head>
  <body>
    <div id="map-container">
      <div id="map"></div>
      <div id="input-container">
        <div id="menu-toggle">Hide menu</div>
        <h2>NaviGator</h2>
        <section id="mainText">
          <label for="startLocation"> Starting Point:</label>
          <input type="text" id="startLocation" name="startLocation" />
          <br />
          <label for="endLocation">Destination:</label>
          <input type="text" id="endLocation" name="endLocation" />
          <br />
          <input type="checkbox" id="option1" name="option1" value="option1" />
          <label for="option1">Dijkstra's</label><br />
          <input type="checkbox" id="option2" name="option2" value="option2" />
          <label for="option2">Breadth-First Search</label><br />
          <button id="calculate-route-btn" onclick="calculateRoute()"> Calculate Route </button>
        </section>
      </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
    
    <script type = module>
      // Import the readAirportsFromFile function
      //import fs from 'fs';
      //import readAirportsFromFile from './public/parsefile.js';

      // Define a route handler that calls the readAirportsFromFile function

      var map = L.map("map").setView([29.6413, -82.357], 13);
      //map.dragging.disable();
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution:
          'Map data Â© <a href="https://openstreetmap.org">OpenStreetMap</a> contributors',
        maxZoom: 18,
      }).addTo(map);
      
      // create a marker with clickable set to true
      var marker = L.marker([29.6413, -82.357], {
        clickable: true
      }).addTo(map);
      var markerLayer = L.layerGroup().addTo(map);
      
      const customIcon = L.icon({
        iconSize: [10, 10], // adjust the size of the marker here
        popupAnchor: [0, -10] // adjust the popup anchor to position it correctly
      });


      fetch('/airports.dat.txt')
        .then((response) => response.text())
        .then((data) => {
          const lines = data.trim().split("\n");
          const markers = []; // store markers in an array

          // Loop through each line and extract the airport name, longitude, and latitude
          for (let i = 0; i < lines.length/2; i++) {
            const fields = lines[i].split(",");
            const name = fields[1].replace(/"/g, ""); // remove quotes from the name
            const longitude = parseFloat(fields[6]);
            const latitude = parseFloat(fields[7]);

            // Create a marker object for each airport
            if(!isNaN(longitude) && !isNaN(latitude)){
              const marker = L.marker([longitude,latitude]);
              marker.bindPopup(name);
              markers.push(marker);
            }
          }

          // Add markers to map and only show when on screen
          map.on('moveend', function() {
            const bounds = map.getBounds();

            markers.forEach(function(marker) {
              const markerLatLng = marker.getLatLng();
              if (bounds.contains(markerLatLng)) {
                map.addLayer(marker);
              } else {
                map.removeLayer(marker);
              }
            });
          });
        });

        // Define the coordinates for the two markers
        var startLatLng = L.latLng(30.2358,-81.680603);
        var endLatLng = L.latLng(29.6900997162,-82.2717971802);

        // Create an array of LatLng points for the polyline
        var polylinePoints = [startLatLng, endLatLng];

        // Create the polyline object and add it to the map
        var polyline = L.polyline(polylinePoints, {color: 'red'}).addTo(map);


      map.on('click', function(e) {
        markerLayer.clearLayers();
        // create new marker at click location
        var marker = L.marker(e.latlng).addTo(markerLayer);
        // get the latitude and longitude of the click event
        var latlng = e.latlng;
    
      });

      

      var isContainerVisible = true;
      document.getElementById("menu-toggle").addEventListener("click", function() {
        var inputContainer = document.getElementById("input-container");
        var menuToggle = document.getElementById("menu-toggle");
        if (isContainerVisible) {
          inputContainer.style.left = "-500px";
          isContainerVisible = false;
          menuToggle.innerText = "Show menu";
        } else {
          inputContainer.style.left = "0px";
          isContainerVisible = true;
          menuToggle.innerText = "Hide menu";
        }
      });


      
    </script>
  </head>
</html>
